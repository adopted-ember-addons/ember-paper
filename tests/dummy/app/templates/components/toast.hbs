<PaperContent @scroll-y={{true}} @padding={{true}} @class="layout-padding flex">

  <h1>Component Usage</h1>

  <h2>Playground</h2>
  <div class="layout-column layout-align-center-center">
    {{! BEGIN-SNIPPET toast.component }}
    {{#if showToast}}
      <PaperToast @duration={{duration}} @position={{concat positionY " " positionX}} @capsule={{capsule}} @swipeToClose={{swipeToClose}} @onClose={{action "closeToast"}} as |toast|>
        <toast.text>Hello</toast.text>
        <PaperButton @accent={{true}} @onClick={{action "buttonAction"}}>Undo</PaperButton>
      </PaperToast>
    {{/if}}

    {{#if showToastWithout}}
      <PaperToast @duration={{duration}} @position={{concat positionY " " positionX}} @capsule={{capsule}} @swipeToClose={{swipeToClose}} @onClose={{action "closeToastWithout"}} as |toast|>
        <toast.text>Hello</toast.text>
      </PaperToast>
    {{/if}}
    {{! END-SNIPPET }}

    <p>Open a toast over the app's content. Press escape, swipe or timeout to close the toast.</p>

    <div class="layout-row layout-wrap">
      <PaperButton @raised={{true}} @primary={{true}} @onClick={{action "openToast"}}>
        Open toast with accent button
      </PaperButton>

      <PaperButton @raised={{true}} @primary={{true}} @onClick={{action "openToastWithout"}}>
        Open toast
      </PaperButton>
    </div>

    <h3>Options</h3>
    <div class="layout-row layout-wrap layout-xs-column layout-sm-column">

      <div class="flex">
        <PaperRadioGroup @groupValue={{positionX}} @onChange={{action (mut positionX)}} as |group|>
          <group.radio @value="left">Left</group.radio>
          <group.radio @value="right">Right</group.radio>
        </PaperRadioGroup>
      </div>
      <div class="flex">
        <PaperRadioGroup @groupValue={{positionY}} @onChange={{action (mut positionY)}} as |group|>
          <group.radio @value="top">Top</group.radio>
          <group.radio @value="bottom">Bottom</group.radio>
        </PaperRadioGroup>
      </div>
      <div class="flex">
        <PaperCheckbox @value={{capsule}} @onChange={{action (mut capsule)}}>
          capsule
        </PaperCheckbox>
      </div>
      <div class="flex">
        <PaperCheckbox @value={{swipeToClose}} @flex={{true}} @onChange={{action (mut swipeToClose)}}>
          swipeToClose
        </PaperCheckbox>
      </div>
    </div>

    <h3>duration ({{duration}}ms)</h3>
    <div class="layout layout-align-center-center slider-container">
      {{paper-icon "watch later"}}
      <PaperSlider @class="flex" @value={{duration}} @max={{6000}} @onChange={{action (mut duration)}} />
    </div>
  </div>

  {{#let (get-code-snippet "toast.component.hbs") as |snippet|}}
    <CodeBlock @language="markup">
{{snippet.source}}
    </CodeBlock>
  {{/let}}

  <div class="layout-column layout-align-center-center">
    {{paper-api
      (p-section
        (p-row "parent" "element or selector" "Existing element where the modal and backdrop will be rendered")
        (p-row "swipeToClose" "boolean" "Causes swiping to trigger the `onClose` handler. Defaults to `true`.")
        (p-row "duration" "number or `false`" "Timeout in milliseconds, set to false to disable timeout. Defaults to `3000`")
        (p-row "escapeToClose" "boolean" "Causes pressing escape to close the toast. Defaults to `false`.")
        (p-row "position" "string" "Possible values are `bottom left` (default), `bottom right`, `top left` and `top right`")
        (p-row "capsule" "boolean" "Controls whether the capsule class is added to the toast.Defaults to `false`")
      )
      (p-section
        "Actions"
        (p-row "onClose" "action" "An action to be executed when the toast is closed, e.g. by pressing escape, swiping or timeout.")
      )
    }}
  </div>

  <h1>Service Usage</h1>

  <h2>Playground</h2>
  <div class="layout-column layout-align-center-center" id="toast-example" style="position:relative;">
    <PaperToaster @parent="#toast-example" />
    <p>Open a toast via <code>paperToaster</code> service and <code>\{{paper-toaster}}</code> component.</p>

    <h3>Options</h3>

    <div class="layout-column">
      <PaperInput @label="Toast text" @value={{toastText}} @onChange={{action (mut toastText)}} />

      <strong>Toast class</strong>
      <div>
        <PaperRadioGroup @class="layout-row" @groupValue={{toastClass}} @onChange={{action (mut toastClass)}} as |group|>
          <group.radio @value="">[none]</group.radio>
          <group.radio @value="md-accent">md-accent</group.radio>
          <group.radio @value="md-warn">md-warn</group.radio>
        </PaperRadioGroup>
      </div>
    </div>

    <div class="layout-row">
      <PaperButton @raised={{true}} @primary={{true}} @onClick={{action "openServiceToast"}}>
        Open toast
      </PaperButton>
      <PaperButton @raised={{true}} @primary={{true}} @onClick={{action "openServiceActionToast"}}>
        Open toast with action
      </PaperButton>
    </div>
    <PaperList>
      {{#each paperToaster.queue as |toast index|}}
        <PaperItem as |controls|>
          <p>
            "{{toast.text}}" -
            {{#if (eq index 0)}}
              {{#if toast.show}}
                showing for {{toast.duration}}ms
              {{else}}
                (Removing...)
              {{/if}}
            {{else}}
              (Waiting)
            {{/if}}
          </p>
          <div class="md-secondary-container">
            <controls.button @secondary={{true}} @onClick={{action "cancelToast" toast}}>
              Cancel
            </controls.button>
          </div>
        </PaperItem>
      {{/each}}
    </PaperList>
  </div>

  {{#let (get-code-snippet "toast.component.hbs") as |snippet|}}
    <CodeBlock @language="markup">
{{snippet.source}}
    </CodeBlock>
  {{/let}}

  <div class="layout-column layout-align-center-center">
    {{paper-api
      (p-section
        "Methods"
        (p-row "show(text[, options])" "Toast" "Display a toast that renders given text.")
        (p-row "showComponent(componentName[, options])" "Toast" "Display a toast that renders a component.")
        (p-row "cancelToast(toast)" "" "Closes or cancel a given toast.")
      )
      (p-section
        "Options"
        (p-row "duration" "number or `false`" "Timeout in milliseconds. Defaults to `3000`. Use `false` to keep it open until a `cancelToast` is used.")
        (p-row "onClose" "function" "You can pass in a function the will be called back after the toast closes.")
        (p-row "position" "string" "Possible values are `bottom left` (default), `bottom right`, `top left` and `top right`")
        (p-row "toastClass" "string" "CSS class to be applied to the md-toast element")
        (p-row "action.label" "string" "The label of the action button.")
        (p-row "action.primary" "boolean" "Wether or not you want the action button to be higlighted with the primary color.")
        (p-row "action.accent" "boolean" "Wether or not you want the action button to be higlighted with the accent color.")
        (p-row "action.warn" "boolean" "Wether or not you want the action button to be higlighted with the warn color.")
        (p-row "action.onClick" "function" "This function gets called when the button is pressed.")
      )
    }}

    <h3>Application defaults</h3>

    <p>
      You can define a default <code>duration</code>, <code>toastClass</code>
      and <code>position</code> for your application by adding in your
      <code>config/environment.js</code> file:
    </p>
  </div>

  <span id="bottom-of-card"></span>

</PaperContent>
